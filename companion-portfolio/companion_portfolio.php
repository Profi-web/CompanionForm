<?php/*Plugin Name: Companion PortfolioPlugin URI:  http://codeermeneer.nl/portfolio/companion-portfolio/Description: A fully responsive portfolio plugin, looking sharp on every device! Easy to use and fully configurable.Version:     2.3.0Author:      Papin SchipperAuthor URI:  http://codeermeneer.nlLicense:     GPL2License URI: https://www.gnu.org/licenses/gpl-2.0.htmlText Domain: companion-portfolioDomain Path: /languages/The WordPress plugin Companion Sitemap Generator is licensed under the GPL v2 or later.This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License, version 2, as published by the Free Software Foundation.This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA*/// Disable direct accessdefined( 'ABSPATH' ) or die( 'No script kiddies please!' );// (De)Activation settingsregister_deactivation_hook( __FILE__, 'flush_rewrite_rules' );register_activation_hook( __FILE__, 'flush_rewrite_rules' );// Load translation files firstfunction cp_load_textdomain() {	load_plugin_textdomain( 'companion-portfolio', false, dirname( plugin_basename( __FILE__ ) ) . '/languages/' ); }add_action( 'init', 'cp_load_textdomain', 0 );// Database versionfunction cp_version() {	return '2.3.0';}// On plugin updatefunction cp_update_db_check() {	$cp_version = cp_version();    if ( get_site_option( 'cp_version' ) != $cp_version ) {    	// In version 2.3.0 we've added the "Default" category    	if( get_site_option( 'cp_version' ) < '2.3.0' OR get_site_option( 'cp_version' ) == '' ) {			cp_default_category();    	}        update_option( "cp_version", $cp_version );    }}add_action( 'upgrader_process_complete', 'cp_update_db_check' );// Register custom post typefunction cp_custom_pt() {	// Set up variables	$pluginRoot = plugin_dir_path( __FILE__ );	$slug 		= get_option( 'cp_cpt_base' );    if( !$slug ) {    	$slug = 'portfolio';    }    // Register post type    register_post_type( 'portfolio',        array(	        'labels' => array(				'name' 					=> __( 'Portfolio', 'companion-portfolio' ),				'singular_name' 		=> __( 'Portfolio', 'companion-portfolio' ),				'add_new' 				=> __( 'New project', 'companion-portfolio'),				'add_new_item' 			=> __( 'Add new project', 'companion-portfolio' ),				'new_item' 				=> __( 'New project', 'companion-portfolio' ),				'all_items' 			=> __( 'All projects', 'companion-portfolio' ),				'search_items' 			=> __( 'Search portfolio', 'companion-portfolio' ),				'not_found' 			=> __( 'No projects found', 'companion-portfolio'),				'not_found_in_trash' 	=> __( 'No projects found in Trash', 'companion-portfolio' ),				'edit_item'	 			=> __( 'Edit project', 'companion-portfolio' ),				'view_item'				=> __( 'View project', 'companion-portfolio' ),	        ),	        'description' 	=> __( 'Create portfolio items', 'companion-portfolio' ),	        'public' 		=> true,	        'has_archive' 	=> true,	        'menu_position' => 25, // Below comments	        'rewrite' 		=> array( 'slug' => $slug ),	        'supports' 		=> array( 	        	'title', 	        	'editor', 	        	'thumbnail', 	        	'excerpt', 	        	'comments',	        ),	        'show_in_rest' 	=> true, // Enable gutenberg	        'menu_icon' 	=> 'dashicons-category',        )    ); }add_action( 'init', 'cp_custom_pt', 1 );// Create taxonomy portfolio categoriesfunction register_custom_taxonomies() {	// Create category taxonomy    register_taxonomy( 'portfolio_cat', 'portfolio', array(		"hierarchical" 		=> true,		"label" 			=> __( 'Categories', 'companion-portfolio' ),		"singular_label" 	=> __( 'Categorie', 'companion-portfolio' ),		'query_var' 		=> true,		'rewrite' 			=> array( 			'slug' 			=> 'portfolio-category', 			'with_front' 	=> true 		),		'public' 			=> true,		'show_ui' 			=> true,		'show_tagcloud' 	=> false,		'_builtin' 			=> false,		'show_in_nav_menus' => false    ));    // Create default category to prevent errors    cp_default_category();}add_action( 'init', 'register_custom_taxonomies', 2 );// Create default category to prevent errorsfunction cp_default_category() {    if( !term_exists( __( 'Default', 'companion-portfolio' ), 'portfolio_cat' ) ) {	    wp_insert_term(	    	__( 'Default', 'companion-portfolio' ),	    	'portfolio_cat',	    	array(	    		'description'	=> __( "The default portfolio category, will be used if no category is selected. It's advised to not remove this category.", "companion-portfolio" ),	    		'slug'			=> 'companion-portfolio'	    	)	    );	}}// Configure permalinksfunction cp_reg_permalink( $permalink, $post, $leavename, $sample ) {    if ( $post->post_type == 'portfolio' && get_option( 'permalink_structure' ) ) {		$slug = get_option( 'cp_cpt_base' );	    if( ! $slug ) $slug = 'portfolio';        $struct = '/'.$slug.'/%postname%/';        $rewritecodes = array(        	'%category%',            '%postname%'        );        $unixtime 		= strtotime( $post->post_date );        $rewrite_cat 	= __( 'portfolio', 'companion-portfolio' );        $category 		= get_the_terms( $post->post_id, 'portfolio_cat' );        if( $category ) {			foreach( $category as $key => $value ) {				foreach( $value as $iets => $iets2 ) {					if( $iets == 'slug' ) {						$rewrite_cat = $iets2;					}				}			}		} else {			$rewrite_cat = 'companion-portfolio';		}        $replacements = array(        	$rewrite_cat,            $post->post_name        );        // finish off the permalink        $permalink = home_url( str_replace( $rewritecodes, $replacements, $struct ) );        $permalink = user_trailingslashit( $permalink, 'single' );    }    return $permalink;}add_filter( 'post_type_link', 'cp_reg_permalink', 10, 4 );// Add the URL Metaboxfunction cp_porfolio_url_metaboxes() {	add_meta_box( 'cp_portfolio-category', __( 'Categories', 'companion-portfolio' ), 'cp_portfolio_category', 'portfolio', 'side', 'default' );	add_meta_box( 'cp_portfolio-url', __( 'Website URL', 'companion-portfolio' ), 'cp_portfolio_url', 'portfolio', 'side', 'default' );}add_action( 'add_meta_boxes', 'cp_porfolio_url_metaboxes' );// The URL Metaboxfunction cp_portfolio_url() {	global $post;	echo '<input type="hidden" name="portfoliourl_noncename" id="portfoliourl_noncename" value="' .wp_create_nonce( plugin_basename(__FILE__) ). '" />'; // Noncename needed to verify where the data originated	$url = get_post_meta( $post->ID, 'portfolio_url', true ); // Get the location data if its already been entered	echo '<input type="text" name="portfolio_url" value="'.sanitize_text_field( $url ).'" class="widefat" placeholder="http://example.com" />'; // Echo out the field}// The category metaboxfunction cp_portfolio_category() {	global $post;	$terms 		= get_terms( 'portfolio_cat', array( 'hide_empty' => false ) );    $category 	= get_the_terms( $post->ID, 'portfolio_cat' );    $selected 	= array();        foreach ( $category as $k => $v ) foreach ( $v as $key => $value ) if( $key == 'term_id' ) array_push( $selected, $value );	echo '<div class="components-base-control" style="padding-top: 10px">';		foreach ( $terms as $term ) {			if( in_array( $term->term_id, $selected ) ) $checked = 'CHECKED'; else $checked = '';			echo "<p><label><input type='checkbox' value='$term->term_id' name='portfolio_categories[]' $checked >$term->name</label></p>";		}	echo '</div>';}// Save the Metabox Datafunction cp_save_portfoliourl_meta( $post_id, $post ) {	if ( $post->post_type == 'portfolio' && isset( $_POST['portfolio_url'] ) ) {			if ( !wp_verify_nonce( $_POST['portfoliourl_noncename'], plugin_basename(__FILE__) ) ) return $post_id;		if ( !current_user_can( 'edit_post', $post_id ) ) return $post_id;		$portfolio_meta['portfolio_url'] = $_POST['portfolio_url'];				foreach ($portfolio_meta as $key => $value) {			if( $post->post_type == 'revision' ) {				return; // Don't store custom data twice			}			$value = implode( ',', (array)$value ); // If $value is an array, make it a CSV (unlikely)			if( get_post_meta( $post_id, $key, FALSE ) ) {				update_post_meta( $post_id, $key, $value );			} else { 				add_post_meta( $post_id, $key, $value );			}			if( !$value ) delete_post_meta( $post_id, $key );		}	}	if ( $post->post_type == 'portfolio' ) {		if( isset( $_POST['portfolio_categories'] ) ) {			$values = array();			foreach ( $_POST['portfolio_categories'] as $value ) {				array_push( $values, $value );			}		} else {			$defaultTerm__name 	= __( 'Default', 'companion-portfolio' );			$values 			= get_term_by( 'name', $defaultTerm__name, 'portfolio_cat' );		}		wp_set_post_terms( $post_id, (array)$values, 'portfolio_cat' );	}	}add_action( 'save_post', 'cp_save_portfoliourl_meta', 1, 2 );// The shortcodefunction cp_frontEnd_loop_handler( $attributes ) {	// Allowed attributes	$conf = shortcode_atts([		'limit' 		=> '-1',		'sortby' 		=> 'name',		'columns' 		=> '2',		'showdate' 		=> 'true',		'showexcerpt' 	=> 'false',		'showcategory'	=> 'false',		'order' 		=> 'ASC',		'cat' 			=> '',	], $attributes, 'companion-portfolio' );	return cp_frontEnd_loop( $conf['limit'], $conf['sortby'], $conf['columns'], $conf['showdate'], $conf['showexcerpt'], $conf['showcategory'], $conf['order'], $conf['cat'] );}function cp_frontEnd_loop( $limit, $sortby, $columns, $showdate, $showexcerpt, $showcategory, $order, $cat ) {		// Set up variables, sanitize them	$columns 	= sanitize_text_field( $columns );	$sortby 	= sanitize_text_field( $sortby );	$limit 		= sanitize_text_field( $limit );	$order 		= sanitize_text_field( $order );	// Check if we need to filter for a category or not	if( $cat != '' ) {		$category_filter 	= sanitize_text_field( $cat );		$catClass 			= 'cat-' . str_replace( "-", " ", $category_filter );		// Set up arguments		$args = array(			'post_type' 		=> 'portfolio', 			'post_status' 		=> 'publish', 			'orderby' 			=> $sortby, 			'posts_per_page' 	=> $limit, 			'order' 			=> $order,			'tax_query' => array(				array(					'taxonomy' 	=> 'portfolio_cat',					'field'    	=> 'name',					'terms'		=> $category_filter				),			),		);	} else {		$catClass 			= '';		// Set up arguments		$args = array(			'post_type' 		=> 'portfolio', 			'post_status' 		=> 'publish', 			'orderby' 			=> $sortby, 			'posts_per_page' 	=> $limit, 			'order' 			=> $order,		);	}	// Return the items	$portfolio_query 	= new WP_Query( $args );	// Open the portfolio container	$return = '<div id="cp_portfolio_container" class="cp_portfolio_container">';	if( $portfolio_query->have_posts() ) {		while( $portfolio_query->have_posts() ) {			$portfolio_query->the_post(); 			$thumb 		= wp_get_attachment_image_src( get_post_thumbnail_id( get_the_ID() ), 'large' );			$imgUrl 	= $thumb['0'];			$category 	= get_the_terms( get_the_ID(), 'portfolio_cat' );			if( $category ) {				foreach ( $category as $key => $value ) {					foreach ( $value as $iets => $iets2 ) {						if( $iets == 'name' ) {							$category = $iets2;						}					}				}			} else {				$category = '';			}			$return .= '<div class="cp_portfolio_item cp_columns-'.$columns.' '.$catClass.'">';				ob_start();					do_action( 'cp_portfolio_before_image' );			        $cp_portfolio_before_image = ob_get_contents();			    ob_end_clean();			    $return .= $cp_portfolio_before_image;				// Thumbnail				$return .= '<div class="cp_portfolio_image" style="background-image: url('.$imgUrl.');">';					// Overlay with actions					ob_start();				        do_action( 'cp_portfolio_actions' );				        $cp_portfolio_actions = ob_get_contents();				    ob_end_clean();				    $return .= $cp_portfolio_actions;				$return .= '</div>';				ob_start();					do_action( 'cp_portfolio_after_image' );					do_action( 'cp_portfolio_before_text' );			        $cp_portfolio_before_text = ob_get_contents();			    ob_end_clean();			    $return .= $cp_portfolio_before_text;				// Text				$return .= '<div class="cp_portfolio_text">					<a href="'.get_the_permalink().'">';						$return .= '<h2 class="cp_portfolio_title">'.get_the_title().'</h2>';						if( $showcategory == 'true' && $category != '' ) $return .= '<h3 class="cp_portfolio_category">'.$category.'</h3>';						if( $showexcerpt == 'true') 	$return .= '<p class="cp_portfolio_excerpt">'.get_the_excerpt().'</p>';						if( $showdate == 'true' ) 		$return .= '<p class="cp_portfolio_date">'.get_the_date().'</p>';				$return .= '</a>				</div>';				ob_start();					do_action( 'cp_portfolio_after_text' );			        $cp_portfolio_after_text = ob_get_contents();			    ob_end_clean();			    $return .= $cp_portfolio_after_text;			$return .= '</div>';		}	} else {		$return .= '<div class="cp_portfolio_message no-projects-found"><p>'.__( 'Oops: No portfolio items were found', 'companion-portfolio' ).'.</p></div>';	}	$return .= '</div>';	wp_reset_postdata();	return $return;}add_shortcode( 'companion-portfolio' , 'cp_frontEnd_loop_handler' );// Get portfolio URLfunction cp_getURL() {	if( get_post_meta( get_the_ID(), 'portfolio_url', true ) != '' ) {		$url = sanitize_text_field( get_post_meta( get_the_ID(), 'portfolio_url', true ) );		if ( strpos( $url, 'http' ) !== false ) {			return $url;		} else {			return 'http://'.$url;		}	} else {		return '';	}}// Show link on pagefunction cp_change_the_content( $content ) {    if ( is_singular( 'portfolio' ) ) {		ob_start();	        do_action( 'cp_after_content' );	        $afterContent = ob_get_contents();	    ob_end_clean();	    $content .= $afterContent;    }    return $content;}add_filter( 'the_content', 'cp_change_the_content' );function cp_website_button() {	if( cp_getURL() != '' ) {		echo "<a href='".cp_getURL()."' target='_blank' class='cp_single_link'>			".__( 'View website', 'companion-portfolio' )."		</a>";	}}add_action( 'cp_after_content', 'cp_website_button', 10 );// cp_portfolio_actions actionfunction cp_actions_overlay() {	echo "<div class='cp_portfolio_overlay'><div class='cp_portfolio_actions'>";}function cp_actions_overlay_e() {	echo "</div></div>";}function cp_portfolio_add_actions() {	// Website	if( get_post_meta( get_the_ID(), 'portfolio_url', true ) != '' ) {		echo "<a href='".sanitize_text_field( get_post_meta( get_the_ID(), 'portfolio_url', true ) )."' target='_blank' class='cp_portfolio_action cp_portfolio_link'>			<span class='dashicons dashicons-admin-links'></span> ".__( 'Website', 'companion-portfolio' )."		</a>";	}	// View item	echo "<a href='".get_the_permalink()."' class='cp_portfolio_action cp_portfolio_view'>		<span class='dashicons dashicons-visibility'></span> ".__( 'View', 'companion-portfolio' )."	</a>";}add_action( 'cp_portfolio_actions', 'cp_actions_overlay', 1 );add_action( 'cp_portfolio_actions', 'cp_portfolio_add_actions', 5 );add_action( 'cp_portfolio_actions', 'cp_actions_overlay_e', 10 );// Adds stylingfunction cp_frontend_style() {	wp_enqueue_style( 'cp-styling', plugin_dir_url( __FILE__ ) . 'frontend/style.css', array(), '1.0.0', 'all'  );	wp_enqueue_style( 'dashicons' );}add_action( 'wp_enqueue_scripts', 'cp_frontend_style' );;// Add table itemsfunction add_cp_columns( $plugin_columns ) {    $new_columns['cb'] 				= '<input type="checkbox" />';    $new_columns['title'] 			= __( 'Title' , 'companion-portfolio' );    $new_columns['author'] 			= __( 'Author' , 'companion-portfolio' );    $new_columns['portfolio_cat'] 	= __( 'Categories' , 'companion-portfolio' );    $new_columns['date'] 			= __( 'Date' , 'companion-portfolio' );     return $new_columns;}add_filter( 'manage_edit-portfolio_columns', 'add_cp_columns' );// Create columns for custom taxonym portfolio_catfunction cp_set_custom_columns( $columns ) {    $new_columns['portfolio_cat'] 	= __( 'Categories' , 'companion-portfolio' );    return $columns;}function cp_custom_column( $column, $post_id ) {    switch ( $column ) {        case 'portfolio_cat' :            $terms = get_the_term_list( $post_id , 'portfolio_cat' , '' , ',' , '' );            if ( is_string( $terms ) ) {                echo $terms;            } else {                echo "&#8212;";            }            break;    }}add_filter( 'manage_portfolio_posts_columns', 'cp_set_custom_columns' );add_action( 'manage_portfolio_posts_custom_column' , 'cp_custom_column', 10, 2 );// Add permalink settings to default permalink pagefunction cp_load_permalinks() {	// Portfolio archive    // if( isset( $_POST['cp_cpt_archive'] ) ) update_option( 'cp_cpt_archive', esc_attr( $_POST['cp_cpt_archive'] ) );    // add_settings_field( 'cp_cpt_archive', __( 'Portfolio archives', 'companion-portfolio' ), 'cp_field_callback', 'permalink', 'optional' );	// Single portfolio URL    if( isset( $_POST['cp_cpt_base'] ) ) update_option( 'cp_cpt_base', esc_attr( $_POST['cp_cpt_base'] ) );    add_settings_field( 'cp_cpt_base', __( 'Portfolio pages', 'companion-portfolio' ), 'cp_field_callback', 'permalink', 'optional' );}add_action( 'load-options-permalink.php', 'cp_load_permalinks' );// The input fieldfunction cp_field_callback() {	// Portfolio archive    // $cp_cpt_archive = get_option( 'cp_cpt_archive' );      // echo '<code>'.get_site_url().'/</code><input type="text" value="' . esc_attr( $cp_cpt_archive ) . '" name="cp_cpt_archive" id="cp_cpt_archive" class="regular-text" placeholder="portfolio"/><code>/project-name/</code>';	// Single portfolio URL    $cp_cpt_base = get_option( 'cp_cpt_base' );      echo '<code>'.get_site_url().'/</code><input type="text" value="' . esc_attr( $cp_cpt_base ) . '" name="cp_cpt_base" id="cp_cpt_base" class="regular-text" placeholder="portfolio"/><code>/project-name/</code>';    echo '<p>'.__( 'You can also use:', 'companion-portfolio' ).' <code>%category%</code></p>';}add_action( 'init', 'cp_custom_pt' );// Skip block registration if Gutenberg is not enabled/merged.if ( function_exists( 'register_block_type' ) ) {	require('cp_gutenberg.php');}?>